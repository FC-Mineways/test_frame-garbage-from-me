{
    "file": {
        "name": "TEST",
        "data": [
            "Asset",
            "Case",
            "Data",
            "FuncLogic",
            "Head",
            "Report",
            "Report\\log"
        ],
        "data_lib.py": "import path\n\nd = path.Data()\nd.data_file('TEST', ['Asset', 'Case', 'Data', 'FuncLogic', 'Head', 'Report', r'Report\\log'])\nd.data_me()\nd.data_on('', '\u6d4b\u8bd5\u5de5\u4f5c\u53f0.py')\nd.data_on('Head\\\\', 'DriverOn.py')\nd.data_on('Head\\\\', 'DataFrom.py')\nd.data_on('Head\\\\', '\u6240\u7528\u4f9d\u8d56.txt')\nd.data_on('FuncLogic\\\\', 'func.py')\nd.data_on('Data\\\\', 'data.py')\nd.data_on('Case\\\\', 'test.py')\nd.data_on('Report\\\\', '\u6d4b\u8bd5\u62a5\u544a\u751f\u6210.py')\nd.data_on('Report\\\\', '\u90ae\u4ef6.py')\n\nd.data_down()\n\n\n\n"
    },
    "\u6d4b\u8bd5\u5de5\u4f5c\u53f0.py": {
        "re_path": "",
        "msg": "'''\u8fd9\u91cc\u5305\u62ec\u5168\u90e8\u4f9d\u8d56\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0\u6ca1\u6709\u6ce8\u89e3\u7684\u60c5\u51b5'''\nfrom selenium import webdriver                  # \u6d4f\u89c8\u5668\u9a71\u52a8\nfrom selenium.webdriver import ChromeOptions    # \u6d4f\u89c8\u5668\u8bbe\u5b9a\nfrom selenium.webdriver.common.by import By     # H5\u9009\u62e9\u5668\nfrom unittest import TestCase                   # \u6d4b\u8bd5\u7528\u4f8b\u6846\u67b6\nfrom ddt import ddt, data, unpack               # \u6570\u636e\u6279\u5904\u7406\u5de5\u5177\n    # \u6211\u5199\u7684\uff0c\u4ee5\u4e0b\u8fd9\u662f...\u6216\u8005\u8bf4\uff0c\u662f\u9700\u8981\u5f15\u5165\u7684\u9879\u76ee\u5185\u6587\u4ef6\nimport TEST.Head.DataFrom as dtR                # \u6570\u636e\u51c6\u5907[mysql/excel]\nimport TEST.Head.DriverOn as dF                 # \u9a71\u52a8\u8bbe\u7f6e\u53ca\u5feb\u6377\u529f\u80fd\n\n\n"
    },
    "DriverOn.py": {
        "re_path": "Head\\",
        "msg": "from selenium import webdriver\nfrom selenium.webdriver import ChromeOptions\nfrom pykeyboard import PyKeyboard   # \u5728PyUserInput\u4e2d\uff0c\u9700\u8981\u989d\u5916\u5f15\u5165pypiwin32\nimport time\nimport json\n\n\nclass Page():\n    # \u521d\u59cb\u5316\u7aef\u53e3\n    def __init__(self, flag=0):\n        self.port = 'https://pan.baidu.com/disk/main?_at_=1661489443979#/index?category=all'\n        self.max_time = 10\n        self.op(show=int(flag/2), head=int(flag%2))\n        self.on()\n\n    def on(self):\n        driver = webdriver.Chrome(options=self.option)\n        driver.maximize_window()\n        driver.implicitly_wait(self.max_time)\n        driver.get(self.port)\n        self.driver = driver\n\n    def op(self, show=0, head=0):\n        option = ChromeOptions()\n        if show != 0:    # \u662f\u5426\u663e\u793a\n            option.add_argument('--headless')\n        if head != 0:    # \u662f\u5426\u53bb\u9664\u81ea\u52a8\u5316\u6807\u8bc6\n            option.add_experimental_option('excludeSwitches', ['enable-automation'])\n            option.add_experimental_option('useAutomationExtension', False)\n        self.option = option\n\n    # \u5199\u5165\n    def ic(self):\n        cookies = self.driver.get_cookies()\n        with open(file=\"../cookies.json\", mode=\"w+\", encoding=\"utf-8\") as ff:\n            cookies = json.dumps(cookies, sort_keys=False, indent=4, separators=(',', ': '))\n            ff.write(cookies)\n\n    # \u8bfb\u51fa\n    def oc(self):\n        with open(file=\"../cookies.json\", mode=\"r\", encoding=\"utf-8\") as ff:\n            cookies = json.load(ff)\n        for cookie in cookies:\n            self.driver.add_cookie(cookie)\n        self.driver.refresh()\n\n\nclass Qfunc():\n    # \u5feb\u7167\n    def qshot(self, driver):\n        driver.save_screenshot('../Report/log/'+str(time.time()) + \".png\")\n    # \u6a21\u62df\u952e\u76d8\u6309\u4e0b\n    def kpress(self, character, n=1, interval=0):\n        PyKeyboard().tap_key(character=character, n=n, interval=interval)\n    # \u5f3a\u5236\u7b49\u5f85\n    def wait(self, num):\n        time.sleep(num)\n    # \u8b66\u544a\u683c\u5f0f\n    # def warring(self, s, end='\\n'):\n    #     print(f'\\033[0;1;31m{s}\\033[0m', end=end)\n"
    },
    "DataFrom.py": {
        "re_path": "Head\\",
        "msg": "import time                 # \u7528\u4e8e\u8ba1\u65f6\nimport pymysql              # mysql\u64cd\u4f5c\nimport xlrd                 # xls\u8bfb\u53d6\nfrom xlutils import copy    # xls\u6570\u636e\u62f7\u8d1d\nimport pandas as pd         # xlsx\u64cd\u4f5c\n\n#(host='192.168.75.130',user='local',password='123456', database='\u767e\u5ea6\u4eba\u5458\u4fe1\u606f\u5e93')\n\n# \u7070\u8272\u5b57\u4f53\ndef Fg(data,end='\\n'):\n    print(f'\\033[0;0;37m {data}\\033[0m', end=end)\n\n# \u88c5\u9970\u5668\uff0c\u8fd4\u56de\u6267\u884c\u65f6\u95f4\ndef triple(func):\n    def wrapper_triple(*args, **kwargs):\n        print('\\n//--------------------------')\n        t = time.time()\n        msg = func(*args, **kwargs)\n        print('\u6240\u7528\u65f6\u95f4\uff1a')\n        Fg(f'{time.time()-t}s')\n        print('----------------------------\\n')\n        return msg\n    return wrapper_triple\n\n# xls\u6587\u4ef6\u57fa\u672c\u7c7b\n'''datas\u5747\u4e3a\u4e8c\u7ef4\u5217\u8868\uff01'''\nclass xls():\n    '''\n    \u5bf9\u4e8exls\u6587\u4ef6\u7684\u8bfb\u5199\u65b9\u6cd5\u63d0\u4f9b\uff0c\u597d\u5904\u662f\u4e0d\u7528\u518d\u5929\u5929\u5199\u8def\u5f84\u4e86\uff0c\u58f0\u660e\u4e00\u4e2a\u7c7b\u540e\u4e0d\u7b97\u7279\u522b\u9ebb\u70e6    # excel=xls(\u6587\u4ef6\u8def\u5f84\uff0c\u5206\u8868\u5e8f\u53f7)\n    read\uff08\u4ecexls\u4e2d\u8bfb\u53d6\u5185\u5bb9\uff09:\u9ed8\u8ba4\u8fd4\u56de\u4e00\u4e2a\u4e8c\u7ef4\u5217\u8868\uff0c\u63d0\u4f9b\u521d\u59cb\u4f4d\u7f6e\u548c\u884c\u5217\u65b9\u5f0f\u7684\u9009\u62e9     # excel.read()\n                        \u66f4\u65b0\u5bf9\u4e8exlsx\u7684\u652f\u6301\uff0c\u4f46\u662f\u6ca1\u5f97\u9009\u4e86\uff0c\u53ea\u662fpandas\u8bfb\u4e00\u4e0b\u800c\u5df2\n    write\uff08\u5199\u5165xls\u6587\u4ef6\uff09:\u8bf7\u5c06\u5199\u5165\u6570\u636e\u5b58\u4e3a\u4e8c\u7ef4\u5217\u8868\uff0c\u63d0\u4f9b\u521d\u59cb\u4f4d\u7f6e\u548c\u662f\u5426\u8986\u5199\u7684\u9009\u62e9    # excel.write(\u6570\u636e[\u4e8c\u7ef4\u5217\u8868\uff01])\n    '''\n    def __init__(self, \u6587\u4ef6\u8def\u5f84, \u5206\u8868\u5e8f\u53f7=0):\n        self.fileway = \u6587\u4ef6\u8def\u5f84\n        self.sheet_index = \u5206\u8868\u5e8f\u53f7\n        # \u83b7\u53d6\u6587\u4ef6\u540d\n        l = self.fileway[::-1].find('/')\n        if l == -1:\n            self.filename = self.fileway[0:]\n        else:\n            self.filename = self.fileway[len(self.fileway) - l:]\n\n    # flag\u7528\u4e8e\u63a7\u5236\u8d77\u6b65\u533a\u95f4\uff0c\u9ed8\u8ba4\u8df3\u8fc7\u4e00\u6b21\uff0cfunc\u9ed8\u8ba4\u4e3a\u9010\u884c\u8bfb\u53d6\u65b9\u5f0f\uff0c\u4efb\u610f\u503c\u4e3a\u9010\u5217\n    @triple\n    def read(self, flag=1, func='row'):\n        print('\u8bfb\u53d6\u6570\u636e/', end='')\n        try:\n            wb = xlrd.open_workbook(self.fileway)\n            ws = wb.sheet_by_index(self.sheet_index)\n\n            datas = []\n            if (func == 'row'):\n                print(f'\u9010\u884c/\u4ece\u7b2c{flag}\u884c\u5f00\u59cb')\n                for i in range(flag, ws.nrows):\n                    value = ws.row_values(i)\n                    Fg(f'{i}:{value}')\n                    datas.append(value)\n            else:\n                print(f'\u9010\u5217/\u4ece\u7b2c{flag}\u5217\u5f00\u59cb')\n                for i in range(flag, ws.ncols):\n                    value = ws.col_values(i)\n                    Fg(f'{i}:{value}')\n                    datas.append(value)\n        except:\n            df = pd.read_excel(self.fileway, sheet_name=self.sheet_index)\n            datas = df.values\n\n        return datas\n\n    # col,row \u7528\u4e8e\u5b9a\u4f4d\u521d\u59cb\u4f4d\u7f6e\uff0cdata\u4e3a\u53c2\u6570\uff0c\u4f20\u53c2\u65b9\u5f0f\u8bf7\u989d\u5916\u5efa\u7acbdata=[[]],flag\u63a7\u5236\u662f\u5426\u8986\u5199(0\u4e3a\u5426\uff0c\u5176\u4f59\u6570\u503c\u8986\u76d6)\n    @triple\n    def write(self, datas, col=0, row=1, flag=0):\n        print(f'\u4ece[{row}:{col}]\u5199\u5165\uff0c', end='')\n        # \u662f\u5426\u8986\u76d6\n        if flag == 0:\n            filename = '_' + self.filename\n            print('\u4e0d\u8986\u76d6')\n        else:\n            filename = self.filename\n            print('\u8986\u76d6')\n        # \u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u590d\u5236\u5185\u5bb9\uff0c\u6253\u5f00\u5de5\u4f5c\u8868\n        wb = xlrd.open_workbook(self.fileway)\n        new_wb = copy.copy(wb)\n        write_save = new_wb.get_sheet(self.sheet_index)\n        # \u5199\u5165\n        for i in range(len(datas)):\n            Fg(f'{i}:', end='\\t')\n            for j in range(len(datas[i])):\n                Fg(str(datas[i][j]), end=' |')\n                write_save.write(col+i, row+j, datas[i][j])\n            print()\n        # \u4fdd\u5b58\u5de5\u4f5c\u7c3f\n        new_wb.save(filename)\n\n# mysql\u57fa\u7840\u7c7b\n'''data\u8981\u6c42\u4e3a\u4e00\u7ef4\u5217\u8868\uff01'''\nclass mysql():\n    '''\n    __init__\uff08\u521d\u59cb\u5316\uff09:\u4e0d\u9700\u8981\u8c03\u7528\uff0c\u5728\u65b0\u5efa\u7c7b\u65f6\u9700\u8981\u5c06\u9700\u8981\u4fee\u6539\u5185\u5bb9\u4f20\u5165                            # conn = mysql()\n    up\uff08\u62c9\u8d77\u8fde\u63a5\u5e76\u65b0\u5efa\u6e38\u6807\uff09:\u8c03\u7528\u540e\u8fde\u63a5\u6570\u636e\u5e93\uff0c\u4e8b\u524d\u51c6\u5907\u5fc5\u8981\u5185\u5bb9                                 # conn.up()\n    down\uff08\u63d0\u4ea4\u64cd\u4f5c\u5185\u5bb9\uff0c\u5173\u95ed\u6e38\u6807\u53ca\u8fde\u63a5\uff09:\u8c03\u7528\u540e\u5173\u95ed\u5e76\u63d0\u4ea4\u7ed3\u679c\uff0c\u6700\u540e\u5fc5\u8981\u5185\u5bb9                       # conn.down()\n    sql\uff08\u6267\u884csql\u8bed\u53e5\uff09:\u8c03\u7528\u540e\u586b\u5165sql\u8bed\u53e5\uff0c\u82e5\u9700\u8981\u62fc\u63a5\u5185\u5bb9\uff0c\u8865\u5145\u76f8\u5e94\u5217\u8868\u5373\u53ef\uff0c\u62fc\u63a5\u4ec5\u652f\u6301\u5355\u7ec4\u6570\u636e\u4f20\u5165   # conn.sql(sql\u8bed\u53e5\uff0c\u5217\u8868[\u4e0d\u9700\u8981\u7684\u65f6\u5019\u4e0d\u7528\u5199])\n    check\uff08\u67e5\u770b\u7ed3\u679c\uff09:\u8c03\u7528\u540e\u8fd4\u56de\u6570\u636e\u5e93\u7ed3\u679c\uff0c\u4ee5return\u65b9\u5f0f\uff0c\u6548\u679c\u8303\u56f4\u4e0e\u539f\u8bed\u53e5\u4e00\u81f4                   # conn.check(\u67e5\u8be2\u53c2\u6570[\u9ed8\u8ba4\u4e3a\u5355\u6761,0\u4e3a\u5168\u90e8,\u5176\u4ed6\u6570\u5b57\u4e3a\u5bf9\u5e94\u6761\u6570])\n    link\uff08\u67e5\u770b\u8fde\u63a5\u5185\u5bb9\uff09:\u6253\u5370\u94fe\u63a5\u4fe1\u606f                                                     # conn.link()\n    '''\n\n    def __init__(self, host='localhost', database='mysql', port=3306, user='root', password=''):\n        self.user = user\n        self.port = port\n        self.host = host\n        self.password = password\n        self.database = database\n\n    def link(self):\n        print('\\n//\u6240\u5c5e\u8fde\u63a5\u4fe1\u606f----------------')\n        print('user:\\t\\t%s' % self.user)\n        print('password:\\t%s' % self.password)\n        print('host:\\t\\t%s' % self.host)\n        print('port:\\t\\t%s' % self.port)\n        print('database:\\t%s' % self.database)\n        print('----------------------------\\n')\n\n    def up(self):\n        self.connect = pymysql.Connect(user=self.user,  # \u7528\u6237\u540d\n                               password=self.password,  # \u8fde\u63a5\u5bc6\u7801\n                               port=self.port,  # \u6240\u7528\u7aef\u53e3\u53f7\n                               host=self.host,  # \u6240\u8fdeIP\u5730\u5740\n                               database=self.database)  # \u6240\u7528\u6570\u636e\u5e93\n        self.cursor = self.connect.cursor()\n\n    def check(self, nume=1):\n        if (nume == 1):\n            return self.cursor.fetchone()\n        elif (nume == 0):\n            return self.cursor.fetchall()\n        else:\n            return self.cursor.fetchmany(nume)\n\n    def sql(self, sql, data='NULL'):\n        if(data == 'NULL'):\n            self.cursor.execute(sql)\n        else:\n            self.cursor.execute(sql, data)\n\n    def down(self):\n        self.connect.commit()\n        self.cursor.close()\n        self.connect.close()\n\n    def forget(self):\n        print(\"\u8d4b\u6743\u5e76\u6ce8\u518c:\\n\\tgrant all privileges on *.* to '\u7528\u6237\u540d'@'IP\u5730\u5740' identified by '\u5bc6\u7801' with grant option;\\n\\tflush privileges;\")\n        print(\"\u589e\u5220\u6539\u67e5(\u8868\u5185\u64cd\u4f5c\u57fa\u7840):\\n\\tINSERT INTO \u8868\u540d(\u5143\u7d20\u540d\u79f0) VALUES(\u5bf9\u5e94\u5185\u5bb9)\\n\\tDELETE FROM \u8868\u540d WHERE \u6761\u4ef6\\n\\tUPDATE \u8868\u540d SET \u7ed3\u679c\", end='')\n        Fg('WHERE \u6761\u4ef6', end='')\n        print(\" \\n\\tSELECT \u6570\u636e FROM \u8868\u540d\", end='')\n        Fg('WHERE \u6761\u4ef6')\n\n    def about_linux(self):\n        print('\u7f51\u7edc\u90e8\u7f72')\n        print('\u9632\u706b\u5899\u5173\u95ed')\n        print('mysql\u5b89\u88c5')\n        print('mysql\u5bf9\u7528\u6237\u4fee\u6539')\n        print('mysql\u5bf9\u6743\u9650\u4fee\u6539')\n\n# mysql\u65b9\u6cd5\u5c01\u88c5\u7c7b\nclass mysql_process(mysql):\n    '''\n    easy\uff08\u6d41\u7a0b\u5316\u8c03\u7528\uff09:\u8c03\u7528\u540e\u8fd4\u56de\u7ed3\u679c\u5143\u7ec4\uff0c\u5c01\u88c5\u597d\u7684\n    # conn = mysql_process()\n    # conn.easy(sql\u8bed\u53e5\uff0c\u6570\u636e\u5217\u8868[\u4e0d\u9700\u8981\u4e0d\u7528\u5199]\uff0c\u67e5\u8be2\u6b21\u6570[\u9ed8\u8ba4\u5355\u6b21,0\u4e3a\u5168\u90e8,\u5176\u4f59\u6570\u5b57\u8fd4\u56de\u5bf9\u5e94\u6570\u636e\u91cf])\n    '''\n    @triple\n    def easy(self, sql, flag='NULL', nume=1):   # flag(\u6570\u636e\u662f\u5426\u62fc\u63a5)\n        self.up()\n        self.sql(sql, flag)\n        temp = self.check(nume)\n        self.down()\n\n        print('\u6240\u6267\u884c\u7684sql\u8bed\u53e5:')\n        Fg(sql)\n        print('\u7ed3\u679c\uff1a(%d)' % nume)\n        if nume != 1:\n            for i in range(len(temp)):\n                Fg(f'{i}:\\t{temp[i]}')\n        return temp\n"
    },
    "\u6240\u7528\u4f9d\u8d56.txt": {
        "re_path": "Head\\",
        "msg": "HTMLTestRunner-Python3,PyMySQL,ddt,selenium,xlrd,xlutils,PyUserInput,pypiwin32"
    },
    "func.py": {
        "re_path": "FuncLogic\\",
        "msg": "from selenium.webdriver.common.by import By # \u7528\u4e8e\u5bf9\u6570\u636e\u67e5\u627e\u64cd\u4f5c\n\n\nclass Func():\n    '''\u63a8\u8350\u5c06driver\u521d\u59cb\u5316\u8fdb\u5165\u65b9\u6cd5\u7c7b\uff0c\u540e\u7eed\u7701\u4e8b'''\n    def __init__(self, driver):\n        self.driver = driver\n    '''\u5728\u8fd9\u91cc\u5199\u529f\u80fd\uff0c\u53ef\u4ee5\u8fd4\u56de\u9002\u5f53\u7684\u4fe1\u606f'''\n    def func1(self, site):\n        self.driver.find_element(By.XPATH, site).click()\n        return 1"
    },
    "data.py": {
        "re_path": "Data\\",
        "msg": "import TEST.Head.DataFrom as dtR\n'''\u4e13\u7528\u4e8e\u6570\u636e\u7684\u7c7b\uff0c\u7528\u4e8e\u88c5\u8f7dddt\uff0c\u6570\u636e\u9700\u8981\u6574\u7406\u4e3a\u4e8c\u7ef4\u5217\u8868'''\nclass Data:\n\n    def data1(self):\n        data = [[20, 2], [200, 1], [240, 0]]\n        return data\n\n# \u51c6\u5907\u6570\u636e\u7684\u811a\u672c\u5728\u6b64\u5b89\u653e\ndef dataReady():\n    return 0"
    },
    "test.py": {
        "re_path": "Case\\",
        "msg": "from unittest import TestCase\n'''\u6570\u636e\u6279\u91cf\u5316\u5904\u7406\u6240\u9700\u5305\uff0c\u76f8\u5173\u683c\u5f0f\u5df2\u88ab\u6ce8\u91ca\uff0c\u9700\u8981\u65f6\u8bf7\u89e3\u6ce8\n   \u6ce8\u610f\uff1a\u4f7f\u7528ddt\u540e\u4ec5\u652f\u6301\u5168\u8fc7\u7a0b\u6267\u884c\uff0c\u65e0\u6cd5\u518d\u5355\u6b65\u6267\u884c'''\n# from ddt import ddt, data, unpack\n\nimport TEST.Head.DriverOn as dF         # \u5bfc\u5165\u9a71\u52a8\u53ca\u529f\u80fd\nfrom TEST.FuncLogic.func import Func    # \u5bfc\u5165\u5177\u4f53\u64cd\u4f5c\uff0c\u8fd9\u5c06\u4fbf\u4e8e\u6d4b\u8bd5\u8fc7\u7a0b\u7684\u6761\u7406\u6027\n\n# @ddt\nclass Test(TestCase):\n\n    '''TestCase\u5185\u53ef\u5199\u51fd\u6570\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u89c6\u4e3a\u6d4b\u8bd5\u7528\u4f8b\uff0c\n        \u4f5c\u4e3a\u6d4b\u8bd5\u7528\u4f8b\u7684\u9700\u8981\u6267\u884c\u65b9\u6cd5\uff0c\u9700\u8981\u4ee5test\u5f00\u5934'''\n    def a(self):\n        return 0\n\n    # @data\n    # @unpack\n    def test(self, expect):\n        '''\u7f51\u9875\u81ea\u52a8\u5316\u6d4b\u8bd5\u6d41\u7a0b'''\n        try:\n            # \u521d\u59cb\u5316\u6d4f\u89c8\u5668\n            driver = dF.Page()\n            # \u529f\u80fd\u64cd\u4f5c\n            func = Func(driver)\n            dF.Qfunc().wait(0.5)\n            # \u6574\u7406\u7ed3\u679c\n            result = func/1\n            # \u5173\u95ed\u6d4f\u89c8\u5668\n            driver.close()\n        except Exception as e:  # \u5982\u679c\u6709\u5f02\u5e38\uff0c\u5c06\u4f1a\u62cd\u6444\u5feb\u7167\u5e76\u6253\u5370\u7ed3\u679c\n            dF.Qfunc().qshot(driver)\n            print(e)\n        # \u6bd4\u5bf9\u7ed3\u679c\u4e0e\u9884\u671f\n        self.assertEqual(expect, result)\n"
    },
    "\u6d4b\u8bd5\u62a5\u544a\u751f\u6210.py": {
        "re_path": "Report\\",
        "msg": "import unittest\nfrom HTMLTestRunner import HTMLTestRunner\nfrom path import Path\n\nPATH = Path().fp\ntest_path = PATH + r'TEST\\Case'\n\ntest=unittest.defaultTestLoader.discover(test_path, pattern=\"Test*.py\")\nrunner=HTMLTestRunner.HTMLTestRunner(\n    stream=open(file='./\u4e2d\u592e\u7406\u8d22\u7cfb\u7edf\u6d4b\u8bd5.html', mode='w+', encoding='utf-8'),\n    title='\u4e2d\u592e\u7406\u8d22\u7cfb\u7edf\u6d4b\u8bd5',   #\u6807\u9898\n    verbosity=2,            #\u8be6\u7ec6\u7a0b\u5ea6\n    description='\u8fd9\u9700\u6c42\u8c01\u5199\u7684\uff1f\u4e5f\u592a...\u662f\u5427\uff1f'\n)\nrunner.run(test)"
    },
    "\u90ae\u4ef6.py": {
        "re_path": "Report\\",
        "msg": "import smtplib, ssl\nfrom email.message import EmailMessage\nfrom path import Path\n\ndef me():\n    print(\"\u53d1\u8d77\u90ae\u7bb1='18513117913@163.com',\u5bc6\u7801='Fleeting_Cen10'\")\n    print(\"\u53d1\u8d77\u90ae\u7bb1='18513117913@163.com',\u8d4b\u6743\u7801='OROPBPZULYDMLGPZ',\u9001\u8fbe\u90ae\u7bb1='18513117913@163.com'\")\n\nclass mail_smtp():\n\n    def __init__(self,\u53d1\u8d77\u90ae\u7bb1,\u8d4b\u6743\u7801,\u9001\u8fbe\u90ae\u7bb1,\u4e3b\u9898='',\u6b63\u6587=''):\n        self.message = EmailMessage()\n        self.message['From'] = \u53d1\u8d77\u90ae\u7bb1\n        self.message['To'] = \u9001\u8fbe\u90ae\u7bb1\n        self.message['Subject'] = \u4e3b\u9898\n        self.message.set_content(\u6b63\u6587)\n        self.Ec = \u8d4b\u6743\u7801\n        self.smtp = 'smtp.'+\u53d1\u8d77\u90ae\u7bb1[\u53d1\u8d77\u90ae\u7bb1.find('@')+1:\u53d1\u8d77\u90ae\u7bb1.find('.')]+'.com'\n    # \u9644\u4ef6\u4f20\u8f93\n    def atth(self, atth, maintype='file'):\n        sth = atth.replace('\\\\','/')\n        dot_pos = sth[::-1].find('.')\n        name_pos = sth[::-1].find('/')\n        if(dot_pos < 0):\n            dot_pos = len(sth)\n        sub = sth[len(sth)-dot_pos:]\n\n        if(name_pos < 0):\n            name_pos = len(sth)\n        file = sth[len(sth)-name_pos:]\n\n        f = open(sth, \"rb\").read()\n        self.message.add_attachment(f, maintype=maintype, subtype=sub, filename=file)  # \u6dfb\u52a0\u9644\u4ef6\n    # \u7aef\u53e3\u67e5\u770b//\u61d2\u72d7\u7528\u4e86\u522b\u4eba\u603b\u7ed3\u597d\u7684\n    def check_port(self):\n        print(\"http://t.zoukankan.com/05-hust-p-14707724.html\")\n    # \u53d1\u9001\n    def down(self, port, ssls='NONE'):\n        if(ssls == 'NONE'):\n            server = smtplib.SMTP(self.smtp, port=port)\n        else:\n            connt = ssl.create_default_context()\n            server = smtplib.SMTP_SSL(self.smtp, port=port, context=connt)\n        server.login(self.message['From'], self.Ec)\n        server.send_message(self.message)\n\n        server.quit()\n\n\nPATH = Path().fp\nreport_path = PATH + r'TEST\\Report\\\u4e2d\u592e\u7406\u8d22\u7cfb\u7edf\u6d4b\u8bd5.html'\n\nmy = mail_smtp(\u53d1\u8d77\u90ae\u7bb1='18513117913@163.com', \u8d4b\u6743\u7801='OROPBPZULYDMLGPZ', \u9001\u8fbe\u90ae\u7bb1='18513117913@163.com')\nmy.atth(report_path)\nmy.down(25)\n"
    }
}